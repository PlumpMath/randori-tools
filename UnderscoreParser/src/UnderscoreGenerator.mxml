<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   applicationComplete="windowedapplication1_applicationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			[Embed(mimeType="application/octet-stream",source="/assets/underscore_docs.html")]
			public var inputString:Class;
			private var _returnTypes:Object = {};
			
			protected function windowedapplication1_applicationCompleteHandler(event:FlexEvent):void
			{
				_returnTypes["template"] = "Function";
				_returnTypes["chain"] = "_chained";
				_returnTypes["result"] = "*";
				_returnTypes["mixin"] = "void";
				_returnTypes["identity"] = "*";
				_returnTypes["noConflict"] = "_";
				_returnTypes["compose"] = "Function";
				_returnTypes["after"] = "Function";
				source.text = new inputString();
				maximize();
			}
			
			protected function generate_clickHandler(event:MouseEvent):void
			{
				var inputXML:XML = new XML(source.text);
				var docs:XMLList = inputXML..div.(attribute('id') == "documentation")[0].p;
				var output:Vector.<String> = new Vector.<String>();
				generateUnderscoreSource(output, docs);
				_destination.text = output.join("\n");
				output = new Vector.<String>();
				generateUnderscoreChainSource(output, docs);
				chainDestination.text = output.join("\n");
			}
			
			private function generateUnderscoreSource(output:Vector.<String>, docs:XMLList):void
			{
				output[output.length] = "package randori.underscore {";
				output[output.length] = "";
				output[output.length] = "[JavaScript(export=\"false\",name=\"_\")]";
				output[output.length] = "/**";
				output[output.length] = " * Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects.";	
				output[output.length] = " * For Docs, License, Tests, and pre-packed downloads, see: <a href=\"http://underscorejs.org\">http://underscorejs.org</a>";
				output[output.length] = " */";
				output[output.length] = "public class _ {";
				output[output.length] = "";
				for each(var par:XML in docs) {
					if (par["@id"].length() > 0){
						generateMethod(output, par);
						output[output.length] = "";
					}
				}
				output[output.length] = "";
				output[output.length] = "}";
				output[output.length] = "}";
			}
			
			private function generateUnderscoreChainSource(output:Vector.<String>, docs:XMLList):void
			{
				output[output.length] = "package randori.underscore {";
				output[output.length] = "";
				output[output.length] = "[JavaScript(export=\"false\",name=\"\")]";
				output[output.length] = "/**";
				output[output.length] = " * Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects.";	
				output[output.length] = " * For Docs, License, Tests, and pre-packed downloads, see: <a href=\"http://underscorejs.org\">http://underscorejs.org</a>";
				output[output.length] = " */";
				output[output.length] = "public class _chained {";
				output[output.length] = "";
				for each(var par:XML in docs) {
					if (par["@id"].length() > 0){
						generateChainedMethod(output, par);
						output[output.length] = "";
					}
				}
				output[output.length] = "";
				output[output.length] = "}";
				output[output.length] = "}";
			}

			private function generateMethod(output:Vector.<String>, par:XML):void
			{
				var methodName:String = par["@id"];
				if (methodName == "value") {
					return;
				} else if (methodName == "object-functions") {
					methodName = "functions";
				}
				var example:String = extractExampleText(par);
				addASDoc(output, par, example);
				var returnType:String = extractReturnType(example, methodName);
				output[output.length] = "public static function " + methodName + "(" + extractParameters(par.code) + "):" + returnType + " {";
				if (returnType != "void") {
					switch(returnType) {
						case "Number":
							output[output.length] = "return 0;";
							break;
						case "Boolean":
							output[output.length] = "return false;";
							break;
						default:
							output[output.length] = "return null;";
							break;
					}
				}
				output[output.length] = "}";
			}
			
			private function generateChainedMethod(output:Vector.<String>, par:XML):void
			{
				var methodName:String = par["@id"];
				if ((methodName == "value") || (methodName == "chain")) {
					return;
				} else if (methodName == "object-functions") {
					methodName = "functions";
				}
				var example:String = extractExampleText(par);
				addASDoc(output, par, example);
				var returnType:String = extractReturnType(example, methodName);
				output[output.length] = "public function " + methodName + "(" + extractChainedParameters(par.code) + "):_chained {";
				output[output.length] = "return null;";
				output[output.length] = "}";
			}

			/*<p id="each">
			<b class="header">each</b><code>_.each(list, iterator, [context])</code>
			<span class="alias">Alias: <b>forEach</b></span>
			<br />
			Iterates over a <b>list</b> of elements, yielding each in turn to an <b>iterator</b>
			function. The <b>iterator</b> is bound to the <b>context</b> object, if one is
			passed. Each invocation of <b>iterator</b> is called with three arguments:
			<tt>(element, index, list)</tt>. If <b>list</b> is a JavaScript object, <b>iterator</b>'s
			arguments will be <tt>(value, key, list)</tt>. Delegates to the native
			<b>forEach</b> function if it exists.
			</p>*/
			
			private function extractParameters(paramXML:XMLList):String
			{
				var text:String;
				if (paramXML.length() == 0) {
					return "";
				} else {
					text = paramXML[0].text();
				}
				text = text.substr(text.indexOf('(')+1);
				text = text.substr(0,text.length-1);
				var params:Array = text.split(',');
				text = typeParamaters(params);
				return text;
			}
			
			private function extractChainedParameters(paramXML:XMLList):String
			{
				var text:String;
				if (paramXML.length() == 0) {
					return "";
				} else {
					text = paramXML[0].text();
				}
				text = text.substr(text.indexOf('(')+1);
				text = text.substr(0,text.length-1);
				var params:Array = text.split(',');
				params.shift();
				text = typeParamaters(params);
				return text;
			}
			
			private function typeParamaters(params:Array):String
			{
				for(var i:int=0; i < params.length; i++){
					var param:String = params[i];
					param = StringUtil.trim(param);
					var lParam:String = param.toLowerCase();
					if (param.length == 0) {
						continue;
					}
					switch(lParam) {
						case "list":
						case "properties":
						case "object":
						case "obj":
						case "destination":
						case "other":
							param += ":Object";
							break;
						case "*sources":
						case "*defaults":
							param = stripAsterisk(param) + ":Vector.<Object>";
							break;
						case "*keys":
							param = stripAsterisk(param) + ":Vector.<String>";
							break;
						case "function":
							param = "func";
						case "iterator":
						case "wrapper":
						case "interceptor":
							param += ":Function";
							break;
						case "[iterator]":
						case "[hashfunction]":
							param = stripBrackets(param) + ":Function=null";
							break;
						case "*functions":
							param = stripAsterisk(param) + ":Vector.<Function>";
							break;
						case "[context]":
						case "[data]":
						case "[settings]":
							param = stripBrackets(param) + ":Object=null";
							break;
						case "[n]":
						case "[index]":
						case "[fromindex]":
							param = stripBrackets(param) + ":int=0";
							break;
						case "n":
							param = stripBrackets(param) + ":int";
							break;
						case "[shallow]":
						case "[issorted]":
						case "[immediate]":
							param = stripBrackets(param) + ":Boolean=false";
							break;
						case "[*values]":
						case "[*arguments]":
							param = stripAsterisk(stripBrackets(param)) + ":Array=null";
							break;
						case "*arrays":
						case "*others":
							param = stripAsterisk(param) + "arrays:Vector.<Array>";
							break;
						case "memo":
						case "array":
							param += ":Array";
							break;
						case "methodname":
						case "key":
						case "string":
						case "property":
						case "propertyname":
						case "templatestring":
							param += ":String";
							break;
						case "[prefix]":
							param = stripBrackets(param) + ":String=null";
							break;
						case "[*methodnames]":
							param = stripAsterisk(stripBrackets(param)) + ":Vector.<String>=null";
							break;
						case "[values]":
							param = stripBrackets(param);
						case "value":
							param += ":*";
							break;
						case "[start]":
							param = stripBrackets(param) + ":int=0";
							break;
						case "stop":
							param += ":int=1";
							break;
						case "wait":
						case "count":
						case "min":
						case "max":
							param += ":int";
							break;
						case "[step]":
							param = stripBrackets(param) + ":int=1";
							break;
						default:
							throw new Error("Unrecognized param name: " + param);
					}
					params[i] = param;
				}
				return params.join(", ");
			}
			
			private function stripBrackets(param:String):String
			{
				if (param.substr(0,1) == "[") {
					param = param.substr(1,param.length-2);
				}
				return param;
			}
			
			private function stripAsterisk(param:String):String
			{
				return param.substr(1, param.length);
			}
			
			private function extractExampleText(par:XML):String
			{
				var nextSibling:XML = par.parent().children()[par.childIndex()+1];
				if (nextSibling.localName() == "pre") {
					return nextSibling.toXMLString();
				}
				return null;
			}
			/*
			<pre>_.each([1, 2, 3], alert);
			=&gt; alerts each number in turn...
			_.each({one : 1, two : 2, three : 3}, alert);
			=&gt; alerts each number value in turn...</pre>
			*/
			
			private function extractReturnType(example:String, funcName:String):String
			{
				if (_returnTypes[funcName]) {
					return _returnTypes[funcName];
				}
				if (!example){
					return "void";
				} else {
					var text:String = new XML(example).text();
					var lines:Array = text.split("\n");
					var lastLine:String = lines[lines.length-1];
					if (lastLine.substr(0,2) == "=>") {
						lastLine = lastLine.substr(lastLine.indexOf(" ")+1);
						lastLine = StringUtil.trim(lastLine);
						if (lastLine.substr(0,1) == "[") {
							return "Array";
						} else if (lastLine.substr(0,1) == "{") {
							return "Object";
						} else if ((lastLine.substr(0,1) == "\"") || (lastLine.substr(0,1) == "'")) {
							return "String";
						} else if ((lastLine == "false") || (lastLine == "true")) {
							return "Boolean";
						} else if (!isNaN(parseInt(lastLine))) {
							return "Number";
						}
					}
				}
				return "void";
			}
			
			private function addASDoc(output:Vector.<String>, par:XML, example:String):void
			{
				var parText:String = par.toXMLString();
				var parts:Array = parText.split("\n");
				var i:int;
				for(i=0; i < parts.length; i++) {
					parts[i] = " * " + parts[i];
				}
				if (example) {
					var exampleParts:Array = example.split("\n");
					for(i=0; i < exampleParts.length; i++) {
						parts[parts.length] = " * " + exampleParts[i];
					}
				}
				parts.splice(0, 0, "/**");
				parts[parts.length] = " */";
				for each(var str:String in parts) {
					output[output.length] = str;
				}
		}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%" height="100%">
		<s:TextArea id="source" width="33%" height="100%"/>
		<s:TextArea id="_destination" width="33%" height="100%"/>
		<s:TextArea id="chainDestination" width="33%" height="100%"/>
	</s:HGroup>
	<s:HGroup width="100%">
		<s:Button id="generate" label="Generate" click="generate_clickHandler(event)"/>
	</s:HGroup>
</s:WindowedApplication>
